{"version":3,"sources":["components/Square.js","components/Board.js","components/GetPlayerNames.js","components/Game2.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","className","Board","squares","renderSquare","i","GetPlayerNames","name","handleChange","name2","handleChange2","htmlFor","onChange","id","Game2","useState","setName","setName2","init_board","Array","fill","board","setBoard","xIsNext","setXIsNext","gameStatus","setGameStatus","moveHistory","setMoveHistory","handleClick","newBoard","winner","winnerLines","length","a","b","c","calculateWinner","concat","moves","map","step","move","slice","jumpTo","event","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaac46cb.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Square ({value, onClick}) {\n    return (\n        <button className='square' onClick={onClick}>{value}</button>\n    )\n}","import React from 'react'\nimport Square from './Square'\n\nexport default function Board({squares, onClick}) {\n    const renderSquare = (i) => {\n        return (\n        <Square \n        value={squares[i]} \n        onClick={() => onClick(i)}>\n        </Square>\n        )\n    }\n    return (\n        <div className='board-container'>\n            <div className='row'>\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className='row'>\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className='row'>\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\n\n export default function GetPlayerNames({name, handleChange, name2, handleChange2}) {\n \n    \n   \n    return (\n      <div className='form-div'>\n        <form className='form1'>\n          <label htmlFor=\"name\">Name: </label>\n          <input value={name} onChange={handleChange} id=\"name\" />\n        </form>\n        {name ? <strong>X : {name}</strong> : 'Please type your name'}\n      \n      <div>\n        <form className='form2'>\n          <label htmlFor=\"name2\">Name: </label>\n          <input value={name2} onChange={handleChange2} id=\"name2\" />\n        </form>\n        {name2 ? <strong>O : {name2}</strong> : 'Please type your name'}\n      </div>\n    </div>\n    )\n  }","import React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport GetPlayerNames from './GetPlayerNames'\nconst Game2 = () => {\n  const [name, setName] = useState('X')\n  const [name2, setName2] = useState('O')\n  const init_board = Array(9).fill(null);\n  const [board, setBoard] = useState(init_board);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [gameStatus, setGameStatus] = useState(null);\n  const [moveHistory, setMoveHistory] = useState([{ squares: board }]);\n  const calculateWinner = (squares) => {\n    const winnerLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < winnerLines.length; i++) {\n      const [a, b, c] = winnerLines[i];\n      if (squares[a] === squares[b] && squares[b] === squares[c])\n        return squares[a];\n    }\n    return null;\n  };\n  const jumpTo = (step) => {\n    setXIsNext(step % 2 === 0);\n    setBoard(moveHistory[step].squares);\n    setMoveHistory(moveHistory.slice(0, step + 1));\n    if (gameStatus) {\n      setGameStatus(null) \n    }\n  };\n  const handleClick = (i) => {\n    // TODO: make copy of the board\n    const newBoard = [...board];\n    // TODO: if index of the square clicked is filled do anything\n    if (newBoard[i]) return;\n    // TODO: add the new square value to the board copy\n    newBoard[i] = xIsNext ? \"X\" : \"O\";\n    // TODO: set the board equal to the copy\n    setBoard(newBoard);\n    // TODO: Check if there is a winner\n    const winner = calculateWinner(newBoard);\n    if (winner) {\n      // TODO: declare the winner\n      setGameStatus(winner);\n      // TODO: reset the game board\n      // setBoard(init_board);\n      // TODO: reset the move history\n      // setMoveHistory([{ squares: init_board }])\n    }\n    // TODO: set the move history state\n    setMoveHistory(moveHistory.concat({ squares: newBoard }));\n    // TODO: set the next players turn\n    setXIsNext(!xIsNext);\n  };\n  const moves = moveHistory.map((step, move) => {\n    return (\n      <li className='history-list' key={move}>\n        <button className='history-button' \n          onClick={() => {\n            jumpTo(move)\n          }}\n        >\n          {move ? \"Go to #\" + move : (moveHistory.length > 1) ? \"Restart\" : \"Start the Game\"}\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board onClick={(i) => handleClick(i)} squares={board} />\n      </div>\n      <div className=\"game-info\">\n    \n        <div>{gameStatus\n    ? \"Winner is \" + (gameStatus === \"X\" ? name : name2)\n    : \"Next Player is \" + (xIsNext ? name : name2)}</div>\n        <ul>{moves}</ul>\n        <GetPlayerNames \n        name = {name} handleChange = {event => setName(event.target.value)}\n        name2 = {name2} handleChange2 = {event => setName2(event.target.value)}\n        />\n      </div>\n    </div>\n  );\n};\nexport default Game2;","\nimport './App.css';\nimport Game from './components/Game2.js'\n\n\nfunction App() {\n  return (\n    <div className='app-container'>\n    <h1 className='title-h1'>Will's Tic-Tac-Toe Game</h1>\n    <Game/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}